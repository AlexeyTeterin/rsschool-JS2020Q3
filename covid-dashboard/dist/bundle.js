(()=>{"use strict";eval("\n;// CONCATENATED MODULE: ./js/CovidData.js\nasync function getSummary() {\n  const token = { 'X-Access-Token': '5cf9dfd5-3449-485e-b5ae-70a60e997864' };\n  const response = await fetch('https://api.covid19api.com/summary', { headers: token });\n  const data = await response.json();\n  return data;\n}\n\nasync function getWorldStatsByDay() {\n  const response = await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=all');\n  const data = await response.json();\n  return data;\n}\n\nasync function getCountryStatsByDay(countryCode) {\n  const response = await fetch(`https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=all`);\n  const data = await response.json();\n  return data;\n}\n\n;// CONCATENATED MODULE: ./js/keyboardLayouts.js\nconst layouts = {\n  ru: [\n    'ё', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'backspace',\n    'tab', 'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', '\\\\',\n    'caps', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'enter',\n    'shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '.', 'uarr',\n    'sound', 'lctrl', 'lalt', ' ', 'alt', 'lang', 'ctrl', 'larr', 'darr', 'rarr', 'on/off',\n  ],\n  en: [\n    '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'backspace',\n    'tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\\\',\n    'caps', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\\'', 'enter',\n    'shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'uarr',\n    'sound', 'lctrl', 'lalt', ' ', 'alt', 'lang', 'ctrl', 'larr', 'darr', 'rarr', 'on/off',\n  ],\n  ruShifted: [\n    'Ё', '!', '\"', '№', ';', '%', ':', '?', '*', '(', ')', '_', '+', 'backspace',\n    'tab', 'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 'Щ', 'З', 'Х', 'Ъ', '/',\n    'caps', 'Ф', 'Ы', 'В', 'А', 'П', 'Р', 'О', 'Л', 'Д', 'Ж', 'Э', 'enter',\n    'shift', 'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', ',', 'uarr',\n    'sound', 'lctrl', 'lalt', ' ', 'alt', 'lang', 'ctrl', 'larr', 'darr', 'rarr', 'on/off',\n  ],\n  enShifted: [\n    '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', 'backspace',\n    'tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}', '|',\n    'caps', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '\"', 'enter',\n    'shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '<', '>', '?', 'uarr',\n    'sound', 'lctrl', 'lalt', ' ', 'alt', 'lang', 'ctrl', 'larr', 'darr', 'rarr', 'on/off',\n  ],\n  whichCodes: [\n    192, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 189, 187, 8,\n    9, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 219, 221, 220,\n    20, 65, 83, 68, 70, 71, 72, 74, 75, 76, 186, 222, 13,\n    999, 90, 88, 67, 86, 66, 78, 77, 188, 190, 191,\n  ],\n};\n\n/* harmony default export */ const keyboardLayouts = (layouts);\n\n;// CONCATENATED MODULE: ./js/keyboard.js\n\n\nconst keyboard_textarea = document.querySelector('#list__search');\n\nclass KEYBOARD {\n  constructor() {\n    this.properties = {\n      value: '',\n      capsLock: false,\n      shift: false,\n      english: null,\n      sound: false,\n      micOn: false,\n      control: false,\n      altGraph: false,\n      alt: false,\n    };\n    this.elements = {\n      main: null,\n      keysContainer: null,\n      keys: [],\n      layouts: keyboardLayouts,\n    };\n  }\n\n  init() {\n    this.elements.main = document.createElement('div');\n    this.elements.keysContainer = document.createElement('div');\n\n    this.elements.main.classList.add('keyboard', 'goDown');\n\n    this.elements.keysContainer.className = 'keyboard__keys hidden';\n    this.elements.keysContainer.appendChild(this.createKeys());\n\n    this.elements.keys = this.elements.keysContainer.querySelectorAll('.keyboard__key');\n\n    this.elements.main.appendChild(this.elements.keysContainer);\n    document.body.appendChild(this.elements.main);\n\n    if (localStorage.capsLock === 'true') {\n      this.toggleCapsLock();\n      document.querySelector('#Caps').classList.add('keyboard__key--active');\n    }\n\n    if (localStorage.sound === 'true') {\n      this.toggleSound();\n      document.querySelector('#sound').classList.add('keyboard__key--active');\n    }\n\n    this.phisycalInput();\n  }\n\n  toggleCapsLock() {\n    const {\n      keys,\n    } = this.elements;\n    const {\n      english,\n      shift,\n    } = this.properties;\n    const {\n      en,\n      ru,\n      enShifted,\n      ruShifted,\n    } = this.elements.layouts;\n\n    this.properties.capsLock = !this.properties.capsLock;\n    localStorage.capsLock = this.properties.capsLock;\n\n    if (this.properties.capsLock) {\n      keys.forEach((element, index) => {\n        const key = element;\n        const buttonIsSymbol = en[index].length === 1;\n        if (buttonIsSymbol) {\n          if (shift) {\n            key.textContent = english ? enShifted[index] : ruShifted[index];\n            key.textContent = key.textContent.toLowerCase();\n          }\n          if (!shift) {\n            key.textContent = english ? en[index].toUpperCase() : ru[index].toUpperCase();\n          }\n        }\n      });\n    }\n    if (!this.properties.capsLock) {\n      keys.forEach((element, index) => {\n        const key = element;\n        const buttonIsSymbol = en[index].length === 1;\n        if (buttonIsSymbol) {\n          if (shift) {\n            key.textContent = english ? enShifted[index] : ruShifted[index];\n          }\n          if (!shift) {\n            key.textContent = english ? en[index].toLowerCase() : ru[index].toLowerCase();\n          }\n        }\n      });\n    }\n\n    this.phisycalInput();\n  }\n\n  shiftPress() {\n    const {\n      keys,\n    } = this.elements;\n    const {\n      en,\n      ruShifted,\n      enShifted,\n    } = this.elements.layouts;\n    const {\n      english,\n      capsLock,\n    } = this.properties;\n\n    keys.forEach((element, index) => {\n      const key = element;\n      const buttonIsSymbol = en[index].length === 1;\n      if (buttonIsSymbol) {\n        if (english) {\n          key.textContent = capsLock ? enShifted[index].toLowerCase() : enShifted[index];\n        }\n        if (!english) {\n          key.textContent = capsLock ? ruShifted[index].toLowerCase() : ruShifted[index];\n        }\n      }\n    });\n\n    this.properties.shift = true;\n    document.querySelector('#Shift').classList.add('keyboard__key--active', 'red');\n    this.phisycalInput();\n  }\n\n  shiftUnpress() {\n    const {\n      keys,\n    } = this.elements;\n    const {\n      ru,\n      en,\n    } = this.elements.layouts;\n    const {\n      capsLock,\n      english,\n    } = this.properties;\n\n    keys.forEach((element, index) => {\n      const key = element;\n      const buttonIsSymbol = en[index].length === 1;\n      if (buttonIsSymbol) {\n        if (english) {\n          key.textContent = capsLock ? en[index].toUpperCase() : en[index];\n        }\n        if (!english) {\n          key.textContent = capsLock ? ru[index].toUpperCase() : ru[index];\n        }\n      }\n    });\n\n    this.properties.shift = false;\n    document.querySelector('#Shift').classList.remove('keyboard__key--active', 'red');\n    this.phisycalInput();\n  }\n\n  createKeys() {\n    const fragment = document.createDocumentFragment();\n    let keyLayout = [];\n\n    // Load stored language\n    if (localStorage.english === 'false') {\n      this.properties.english = false;\n      keyLayout = this.elements.layouts.ru;\n    } else {\n      this.properties.english = true;\n      keyLayout = this.elements.layouts.en;\n    }\n\n    // Create keys\n    keyLayout.forEach((key) => {\n      const keyElement = document.createElement('button');\n      const insertLineBreak = ['backspace', '\\\\', 'enter', 'uarr'].indexOf(key) !== -1;\n\n      keyElement.setAttribute('type', 'button');\n      keyElement.classList.add('keyboard__key');\n      keyElement.addEventListener('click', () => {\n        keyboard_textarea.focus();\n      });\n\n      switch (key) {\n        case 'shift':\n          keyElement.classList.add('keyboard__key--wide', 'keyboard__key--activatable');\n          keyElement.textContent = 'Shift';\n          keyElement.id = 'Shift';\n\n          keyElement.addEventListener('click', () => {\n            if (!this.properties.shift) this.shiftPress();\n            else this.shiftUnpress();\n            this.soundClick('./assets/audio/switch-4.mp3');\n          });\n          break;\n\n        case 'backspace':\n          keyElement.classList.add('keyboard__key--wide');\n          keyElement.id = 'Backspace';\n          keyElement.textContent = window.innerWidth > 600 ? 'Backspace' : 'Del';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-4.mp3');\n            if (keyboard_textarea\n              .selectionStart === 0 && keyboard_textarea\n              .selectionEnd === keyboard_textarea.selectionStart) {\n              return;\n            }\n            if (keyboard_textarea.selectionEnd === keyboard_textarea.selectionStart) {\n              keyboard_textarea.setRangeText('', keyboard_textarea.selectionStart - 1, keyboard_textarea.selectionEnd, 'end');\n            } else {\n              keyboard_textarea.setRangeText('', keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n            }\n            keyboard_textarea.dispatchEvent(new Event('input'));\n          });\n          break;\n\n        case 'tab':\n          keyElement.classList.add('keyboard__key--wide');\n          keyElement.textContent = 'Tab';\n\n          keyElement.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.soundClick('./assets/audio/switch-10.mp3');\n            keyboard_textarea.setRangeText('\\t', keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n          });\n          break;\n\n        case 'caps':\n          keyElement.classList.add('keyboard__key--wide', 'keyboard__key--activatable');\n          keyElement.id = 'Caps';\n          keyElement.textContent = window.innerWidth > 600 ? 'CapsLock' : 'Caps';\n\n          keyElement.addEventListener('click', () => {\n            this.toggleCapsLock();\n            keyElement.classList.toggle('keyboard__key--active', this.properties.capsLock);\n            this.soundClick('./assets/audio/switch-2.mp3');\n          });\n          break;\n\n        case 'ctrl':\n          keyElement.textContent = 'Ctrl';\n          keyElement.id = 'ControlRight';\n          if (window.innerWidth <= 600) keyElement.style.setProperty('letter-spacing', '-1px');\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n          });\n          break;\n\n        case 'lctrl':\n          keyElement.classList.add('keyboard__key--wide');\n          keyElement.textContent = 'Ctrl';\n          keyElement.id = 'ControlLeft';\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n          });\n          break;\n\n        case 'lang':\n          keyElement.classList.add('keyboard__key--dark');\n          keyElement.textContent = this.properties.english ? 'EN' : 'RU';\n          keyElement.id = 'lang';\n          keyElement.addEventListener('mousedown', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n            this.toggleLang();\n          });\n          break;\n\n        case 'lalt':\n          keyElement.textContent = 'Alt';\n          keyElement.id = 'AltLeft';\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n          });\n          break;\n\n        case 'alt':\n          keyElement.textContent = 'Alt';\n          keyElement.id = 'AltRight';\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n          });\n          break;\n\n        case 'enter':\n          keyElement.classList.add('keyboard__key--wide');\n          keyElement.textContent = 'Enter';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-3.mp3');\n            keyboard_textarea.setRangeText('\\n', keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n          });\n          break;\n\n        case ' ':\n          keyElement.classList.add('keyboard__key--extra-wide');\n          keyElement.textContent = ' ';\n          keyElement.id = 'Space';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n            keyboard_textarea.setRangeText(' ', keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n          });\n          break;\n\n        case 'darr':\n          keyElement.textContent = '↓';\n          keyElement.id = 'ArrowDown';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n            this.setCursorPos('end');\n          });\n          break;\n\n        case 'uarr':\n          keyElement.textContent = '↑';\n          keyElement.id = 'ArrowUp';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n            this.setCursorPos('start');\n          });\n          break;\n\n        case 'larr':\n          keyElement.textContent = '←';\n          keyElement.id = 'ArrowLeft';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n            this.setCursorPos('left');\n          });\n          break;\n\n        case 'rarr':\n          keyElement.textContent = '→';\n          keyElement.id = 'ArrowRight';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n            this.setCursorPos('right');\n          });\n          break;\n\n        case 'on/off':\n          keyElement.classList.add('keyboard__key--dark', 'off', 'keyboard__key--activatable', 'keyboard__key--active');\n          keyElement.id = 'off';\n          keyElement.append(document.createElement('img'));\n          keyElement.children[0].src = './assets/img/on-off-icon.svg';\n          keyElement.children[0].alt = 'OFF';\n\n          keyElement.addEventListener('click', () => {\n            this.soundClick('./assets/audio/switch-10.mp3');\n            this.hideKeyboard();\n            keyElement.classList.remove('keyboard__key--active');\n          });\n          break;\n\n        case 'sound':\n          keyElement.classList.add('keyboard__key--dark', 'sound', 'keyboard__key--activatable');\n          keyElement.id = 'sound';\n          keyElement.append(document.createElement('img'));\n          keyElement.children[0].src = './assets/img/sound-off.svg';\n          keyElement.children[0].alt = 'sound';\n\n          keyElement.addEventListener('click', () => {\n            this.toggleSound();\n            this.soundClick('./assets/audio/switch-10.mp3');\n          });\n          break;\n\n        case 'mic':\n          keyElement.classList.add('keyboard__key--dark', 'mic', 'keyboard__key--activatable');\n          keyElement.id = 'mic';\n          keyElement.append(document.createElement('img'));\n          keyElement.children[0].src = './assets/img/mic.svg';\n          keyElement.children[0].alt = 'mic';\n\n          keyElement.addEventListener('click', () => {\n            this.toggleMic();\n            this.soundClick('./assets/audio/switch-10.mp3');\n          });\n          break;\n\n        default:\n          keyElement.textContent = key.toLowerCase();\n\n          keyElement.addEventListener('click', () => {\n            keyboard_textarea.setRangeText(keyElement.textContent, keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n            this.soundClick('./assets/audio/switch-10.mp3');\n\n            keyboard_textarea.dispatchEvent(new Event('input'));\n          });\n          break;\n      }\n\n      fragment.appendChild(keyElement);\n\n      if (insertLineBreak) {\n        fragment.appendChild(document.createElement('br'));\n      }\n    });\n\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= 600) {\n        document.querySelector('#Caps').textContent = 'Caps';\n        document.querySelector('#Backspace').textContent = 'Del';\n        document.querySelector('#ControlRight').style.setProperty('letter-spacing', '-1px');\n      } else {\n        document.querySelector('#Caps').textContent = 'CapsLock';\n        document.querySelector('#Backspace').textContent = 'Backspace';\n        document.querySelector('#ControlRight').style.setProperty('letter-spacing', '0');\n      }\n    });\n\n    return fragment;\n  }\n\n  hideKeyboard() {\n    this.elements.keysContainer.classList.add('hidden');\n    keyboard_textarea.blur();\n    setTimeout(() => {\n      this.elements.main.classList.add('goDown');\n    }, 200);\n  }\n\n  showKeyboard() {\n    this.elements.keysContainer.classList.remove('hidden');\n    this.elements.main.classList.remove('goDown');\n    document.querySelector('#off').classList.add('keyboard__key--active');\n  }\n\n  toggleKeyboard() {\n    const keyboard = this.elements.main;\n    if (keyboard.classList.contains('goDown')) this.showKeyboard();\n    else this.hideKeyboard();\n  }\n\n  setCursorPos(pos) {\n    if ('selectionStart' in keyboard_textarea) {\n      switch (pos) {\n        case 'left':\n          keyboard_textarea.selectionStart -= 1;\n          break;\n\n        case 'right':\n          keyboard_textarea.selectionStart += 1;\n          break;\n\n        case 'start':\n          keyboard_textarea.selectionStart = 0;\n          break;\n\n        default:\n          keyboard_textarea.selectionStart = keyboard_textarea.textLength;\n          break;\n      }\n      keyboard_textarea.selectionEnd = keyboard_textarea.selectionStart;\n    }\n    return this.properties.value;\n  }\n\n  // Input from real keyboard\n  phisycalInput() {\n    const {\n      whichCodes,\n    } = this.elements.layouts;\n    const {\n      capsLock,\n      shift,\n    } = this.properties;\n    const keySet = [];\n    this.elements.keys.forEach((key) => {\n      keySet.push(key.textContent);\n    });\n\n    document.onkeydown = (event) => {\n      const pos = whichCodes.indexOf(event.which);\n      const inputChar = pos > -1 ? keySet[pos].toLowerCase() : event.key;\n      let counter = -1;\n\n      document.querySelectorAll('.keyboard__key').forEach((key) => {\n        counter += 1;\n        if (key.innerText === event.code || event.code === key.id || pos === counter) {\n          key.classList.add('red');\n          if (event.key === 'AltGraph')(document.querySelector('#ControlLeft').classList.remove('red'));\n        }\n      });\n\n      switch (event.key) {\n        case 'Enter':\n        case 'Backspace':\n        case 'ArrowUp':\n        case 'ArrowDown':\n        case 'ArrowRight':\n        case 'ArrowLeft':\n        case 'CapsLock':\n        case 'Delete':\n          break;\n\n        case 'Shift':\n          this.shiftPress();\n          document.querySelector('#Shift').classList.add('red');\n          break;\n\n        case 'Tab':\n          event.preventDefault();\n          keyboard_textarea\n            .setRangeText('\\t', keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n          break;\n\n        case 'Alt':\n          event.preventDefault();\n          this.properties.alt = true;\n          break;\n\n        case 'AltGraph':\n          event.preventDefault();\n          this.properties.altGraph = true;\n          this.properties.alt = false;\n          this.properties.control = true;\n          break;\n\n        case 'Control':\n          event.preventDefault();\n          this.properties.control = true;\n          if (this.properties.shift) this.toggleLang();\n          break;\n\n        default:\n          event.preventDefault();\n          if (event.key.length === 1) {\n            if (capsLock === shift) {\n              keyboard_textarea\n                .setRangeText(inputChar, keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n            } else {\n              keyboard_textarea\n                .setRangeText(inputChar.toUpperCase(), keyboard_textarea.selectionStart, keyboard_textarea.selectionEnd, 'end');\n            }\n            keyboard_textarea.dispatchEvent(new Event('input'));\n          }\n          break;\n      }\n    };\n\n    document.onkeyup = (event) => {\n      const pos = whichCodes.indexOf(event.which);\n      let counter = -1;\n\n      switch (event.key) {\n        case 'Tab':\n          this.soundClick('./assets/audio/switch-10.mp3');\n          break;\n\n        case 'Enter':\n          this.soundClick('./assets/audio/switch-3.mp3');\n          break;\n\n        case 'Backspace':\n          this.soundClick('./assets/audio/switch-4.mp3');\n          break;\n\n        case 'Shift':\n          this.soundClick('./assets/audio/switch-4.mp3');\n          this.shiftUnpress();\n          document.querySelector('#Shift').classList.remove('red');\n          if (this.properties.control || this.properties.alt) this.toggleLang();\n          break;\n\n        case 'CapsLock':\n          this.soundClick('./assets/audio/switch-2.mp3');\n          document.querySelector('#Caps').classList.toggle('keyboard__key--active', !this.properties.capsLock);\n          this.toggleCapsLock();\n          break;\n\n        case 'Alt':\n          event.preventDefault();\n          if (this.properties.shift) this.toggleLang();\n          this.properties.alt = false;\n          this.soundClick('./assets/audio/switch-10.mp3');\n          break;\n\n        case 'AltGraph':\n          this.soundClick('./assets/audio/switch-10.mp3');\n          this.properties.altGraph = false;\n          this.properties.alt = false;\n          this.properties.control = false;\n          break;\n\n        case 'Control':\n          if (!this.properties.altGraph && this.properties.control) this.soundClick('./assets/audio/switch-10.mp3');\n          this.properties.control = false;\n          break;\n\n        default:\n          this.soundClick('./assets/audio/switch-10.mp3');\n          break;\n      }\n\n      document.querySelectorAll('.keyboard__key').forEach((key) => {\n        counter += 1;\n        if (key.innerText === event.code || event.code === key.id || pos === counter) {\n          key.classList.remove('red');\n        }\n        if (event.key === 'Shift') {\n          this.shiftUnpress();\n        }\n      });\n    };\n  }\n\n  toggleSound() {\n    const {\n      sound,\n    } = this.properties;\n    const soundBtn = document.querySelector('#sound');\n    if (sound) {\n      soundBtn.classList.remove('keyboard__key--active');\n      soundBtn.children[0].src = './assets/img/sound-off.svg';\n    } else {\n      soundBtn.classList.add('keyboard__key--active');\n      soundBtn.children[0].src = './assets/img/sound-on.svg';\n    }\n    this.properties.sound = !sound;\n    localStorage.sound = !sound;\n  }\n\n  toggleMic() {\n    const {\n      micOn,\n    } = this.properties;\n    const micBtn = document.querySelector('#mic');\n    if (micOn) {\n      micBtn.classList.remove('keyboard__key--active', 'pressed');\n    } else {\n      micBtn.classList.add('keyboard__key--active', 'pressed');\n    }\n    this.properties.micOn = !micOn;\n  }\n\n  soundClick(sound) {\n    const src = this.properties.english ? `${sound.slice(0, -4)}-en.mp3` : sound;\n    const audio = new Audio(src);\n    if (this.properties.sound) {\n      audio.play();\n    }\n  }\n\n  toggleLang() {\n    const {\n      ru,\n      ruShifted,\n      en,\n      enShifted,\n    } = this.elements.layouts;\n    const {\n      capsLock,\n      shift,\n      english,\n    } = this.properties;\n    const {\n      keys,\n    } = this.elements;\n    const langButtonText = document.getElementById('lang').textContent;\n\n    for (let index = 0; index < keys.length; index += 1) {\n      const buttonIsSymbol = en[index].length === 1;\n      // Change only symbol buttons\n      if (buttonIsSymbol) {\n        if (english) {\n          if (capsLock) {\n            keys[index].textContent = shift ? ruShifted[index] : ru[index].toUpperCase();\n          } else {\n            keys[index].textContent = shift ? ruShifted[index] : ru[index];\n          }\n        }\n        if (!english) {\n          if (capsLock) {\n            keys[index].textContent = shift ? enShifted[index] : en[index].toUpperCase();\n          } else {\n            keys[index].textContent = shift ? enShifted[index] : en[index];\n          }\n        }\n      }\n    }\n\n    if (langButtonText === 'EN') {\n      document.getElementById('lang').textContent = 'RU';\n    } else document.getElementById('lang').textContent = 'EN';\n\n    localStorage.setItem('english', !this.properties.english);\n    this.properties.english = !this.properties.english;\n\n    this.phisycalInput();\n  }\n}\n\n;// CONCATENATED MODULE: ./js/list.js\n\n\n\nconst searchInput = document.querySelector('#list__search');\nconst indicator = document.querySelector('#list__indicator');\nconst list = document.querySelector('.list__container');\nconst keyboardButton = document.querySelector('.keyboard-button');\n\nconst keyboard = new KEYBOARD();\nkeyboard.init();\n\nconst createOptions = (data) => {\n  const options = Object.keys(data.Global);\n  options.forEach((opt) => options.push(`${opt}Per100k`));\n  return options;\n};\n\nconst calcValuesPer100k = (data, country) => {\n  const result = {};\n  Object.keys(data.Global).forEach((opt) => {\n    const population = country.Premium.CountryStats.Population;\n    let valuePer100k = ((country[opt] / population) * 100000);\n    if (Number.isNaN(valuePer100k)) valuePer100k = 0;\n    result[`${opt}Per100k`] = valuePer100k.toFixed(2);\n  });\n  return result;\n};\n\nconst loadRows = (data, option) => {\n  data.Countries.forEach((country) => {\n    const row = document.createElement('div');\n    const name = document.createElement('div');\n    const value = document.createElement('div');\n    const population = { population: country.Premium.CountryStats.Population };\n\n    row.classList.add('list__row');\n\n    name.textContent = country.Country;\n    name.style.setProperty('background-image', `url(https://www.countryflags.io/${country.CountryCode}/shiny/24.png)`);\n\n    value.textContent = country[option];\n\n    Object.assign(row.dataset, country, calcValuesPer100k(data, country), population);\n    ['Slug', 'Premium', 'Date'].forEach((prop) => delete row.dataset[prop]);\n\n    row.append(name, value);\n    list.append(row);\n  });\n};\n\nconst sortRows = (option) => {\n  const activeElement = document.querySelector('.list__row_active');\n  const rows = document.querySelectorAll('.list__row');\n  const rowsSorted = Array.from(rows).sort((a, b) => {\n    const firtNum = parseFloat(a.dataset[option], 10);\n    const secondNum = parseFloat(b.dataset[option], 10);\n    if (firtNum > secondNum) return -1;\n    if (firtNum < secondNum) return 1;\n    return 0;\n  });\n  rows.forEach((row) => {\n    row.style.setProperty('order', rowsSorted.indexOf(row));\n    const value = row.children[1];\n    value.textContent = row.dataset[option];\n  });\n  if (activeElement) activeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n};\n\nconst splitWords = (string) => {\n  let result = string;\n  const words = ['Confirmed', 'Deaths', 'Recovered', 'Per', '100k'];\n  words.forEach((word) => {\n    const index = result.indexOf(word);\n    if (index < 0) return;\n    result = `${result.slice(0, index)} ${result.slice(index, result.length)}`;\n  });\n  return result;\n};\n\nconst createSelector = (options) => {\n  options.forEach((option) => {\n    const selectorOption = document.createElement('option');\n    selectorOption.value = option;\n    selectorOption.textContent = splitWords(option);\n\n    indicator.appendChild(selectorOption);\n    if (option === 'TotalConfirmed') selectorOption.setAttribute('selected', true);\n  });\n  return options;\n};\n\nconst listSearchHandler = () => {\n  const input = document.querySelector('#list__search');\n  const filter = input.value.toUpperCase();\n  const rows = Array.from(document.getElementsByClassName('list__row'));\n\n  rows.forEach((element) => {\n    const row = element;\n    const countryName = row.children[0].textContent;\n    if (countryName.toUpperCase().indexOf(filter) >= 0) row.style.display = '';\n    else row.style.display = 'none';\n  });\n};\n\nconst listClickHandler = (event) => {\n  const target = event.target.parentElement;\n  const activeElement = document.querySelector('.list__row_active');\n  if (!target.classList.contains('list__row')) return;\n\n  if (activeElement) activeElement.classList.remove('list__row_active');\n  target.classList.add('list__row_active');\n  if (activeElement === target) {\n    target.classList.remove('list__row_active');\n    setTimeout(() => document.querySelector('.row-title-area').dispatchEvent(new Event('click')), 50);\n  }\n  searchInput.value = '';\n  listSearchHandler();\n  target.scrollIntoView({ behavior: 'smooth', block: 'center' });\n};\n\nsetTimeout(() => {\n  document.querySelector('.loading').textContent = 'API performs caching at the moment, please try to reload page 5 minutes later.';\n  document.querySelector('.loading').classList.remove('pulsate');\n}, 7000);\n\nconst hideLoadingText = () => {\n  document.querySelector('.loading').classList.add('hidden');\n  document.querySelector('.content-top').classList.remove('hidden');\n  document.querySelector('.content-bot').classList.remove('hidden');\n};\n\ngetSummary()\n  .then((data) => {\n    createSelector(createOptions(data));\n    loadRows(data, 'TotalConfirmed');\n    sortRows('TotalConfirmed');\n\n    list.addEventListener('click', (event) => listClickHandler(event));\n    searchInput.addEventListener('input', () => listSearchHandler());\n    keyboardButton.addEventListener('click', () => keyboard.toggleKeyboard());\n    indicator.addEventListener('change', () => sortRows(indicator.value));\n\n    hideLoadingText();\n  })\n  .catch((e) => new Error(e));\n\n;// CONCATENATED MODULE: ./js/map.js\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-undef */\nfunction setMap(res) {\n  const request = new XMLHttpRequest();\n  request.open('GET', './assets/json/countries.json');\n  request.onload = () => {\n    const collection = JSON.parse(request.responseText);\n\n    const map = L.map('mapid').setView([40, 20], 2);\n    L.tileLayer('https://api.mapbox.com/styles/v1/pavlovalisa/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n      attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n      maxZoom: 18,\n      minZoom: 2,\n      id: 'ckipuyrx61npy17nqq9rtqsd7',\n      tileSize: 512,\n      zoomOffset: -1,\n      accessToken: 'pk.eyJ1IjoicGF2bG92YWxpc2EiLCJhIjoiY2tpcHUxaW1pMXB6cTJ4cGtmcmo1dzVtYSJ9.Wyer4Fg3gii60yxTn2cdOw',\n    }).addTo(map);\n    const southWest = L.latLng(-60, -180);\n    const northEast = L.latLng(85, 180);\n    const bounds = L.latLngBounds(southWest, northEast);\n\n    map.setMaxBounds(bounds);\n    /// events and countries layout\n\n    const info = L.control();\n    const clickedCountry = { target: null, name: '' };\n    const maxStat = {};\n    const infoType = { type: 'TotalConfirmed', absolute: true };\n\n    function setMaxStat(key) {\n      let max = 0;\n      let maxPer100 = 0;\n\n      res.Countries.forEach((country) => {\n        const pop = country.Premium.CountryStats.Population / 100000;\n        if (max < country[key]) max = country[key];\n        if (maxPer100 < (country[key] / pop)) maxPer100 = country[key] / pop;\n      });\n\n      maxStat[key] = max / 5;\n      maxStat[`${key}Per100`] = maxPer100 / 5;\n    }\n    const keysArr = ['NewConfirmed', 'TotalConfirmed', 'NewDeaths', 'TotalDeaths', 'NewRecovered', 'TotalRecovered'];\n    const labelsArr = ['New Confirmed', 'Total Confirmed', 'New Deaths', 'Total Deaths', 'New Recovered', 'Total Recovered'];\n    keysArr.forEach((a) => setMaxStat(a));\n    info.onAdd = function add() {\n      this.div = L.DomUtil.create('div', 'info');\n      this.update();\n      return this.div;\n    };\n\n    info.update = function update(e) {\n      let country = false;\n      if (e) country = res.Countries.find((c) => c.Country === e.name);\n      let stats = country ? country[infoType.type] : 'no information';\n      if (!infoType.absolute && country) {\n        stats = (stats / (country.Premium.CountryStats.Population / 100000)).toFixed(2);\n      }\n      this.div.innerHTML = `<b>Covid statistics</b><br/>${e\n        ? `<b>${e.name}</b><br/>${labelsArr[keysArr.indexOf(infoType.type)]} ${infoType.absolute ? '' : 'per 100k'}:<br/> ${stats}`\n        : 'Hover over a country'}`;\n    };\n\n    info.addTo(map);\n\n    let geoJson;\n\n    function getColor(name) {\n      const country = res.Countries.find((c) => c.Country === name);\n      if (!country) { return ''; }\n      const colors = ['#800026', '#BD0026', '#E31A1C', '#FC4E2A',\n        '#FD8D3C', '#FEB24C', '#FED976', '#FFEDA0',\n      ];\n      const per100 = infoType.absolute ? 1 : country.Premium.CountryStats.Population / 100000;\n      const stat = infoType.absolute ? maxStat[infoType.type] : maxStat[`${infoType.type}Per100`];\n      const k = country[infoType.type] / per100;\n      let level = stat / 8;\n      if (level > 1000) level = Math.round(level / 1000) * 1000;\n      else level = level.toFixed(3);\n      let a = Math.floor((stat - k) / level);\n      a = a > 7 ? 7 : a;\n      return colors[a < 0 ? 0 : a];\n    }\n\n    function setColors() {\n      Object.keys(geoJson._layers).forEach((key) => {\n        geoJson._layers[key].options\n          .fillColor = getColor(geoJson._layers[key].feature.properties.name);\n        geoJson._layers[key].setStyle({});\n      });\n\n      const label = document.querySelector('#mapid > div.leaflet-control-container > div.leaflet-bottom.leaflet-right > div.info.legend.leaflet-control');\n      label.innerHTML = '';\n      let level = maxStat[`${infoType.type}${infoType.absolute ? '' : 'Per100'}`] / 8;\n      if (level > 1000) level = Math.round(level / 1000) * 1000;\n      else level = level.toFixed(3);\n      const colors = ['#800026', '#BD0026', '#E31A1C', '#FC4E2A',\n        '#FD8D3C', '#FEB24C', '#FED976', '#FFEDA0',\n      ];\n      colors.reverse().forEach((color, i) => {\n        label.innerHTML += `<i style=\"background:${color}\"></i> ${Math.round(level * i * 1000) / 1000}${colors[i + 1] ? `&ndash;${Math.round(level * (i + 1) * 1000) / 1000}<br>` : '+'}`;\n      });\n    }\n\n    function setLabel(e) {\n      if (e.value) {\n        if (infoType === e.value.replace('Per100k', '') && (!infoType.absolute === e.value.includes('Per100k'))) return;\n        infoType.absolute = !e.value.includes('Per100k');\n        infoType.type = e.value.replace('Per100k', '');\n        setColors();\n      }\n    }\n    document.querySelector('#list__indicator').addEventListener('click', (e) => setLabel(e.target));\n    document.querySelector('.row-title-count').addEventListener('click', () => setLabel(document.querySelector('#list__indicator')));\n    document.querySelector('.row-title-abs').addEventListener('click', () => setLabel(document.querySelector('#list__indicator')));\n\n    document.querySelector('.list').addEventListener('click', (e) => {\n      if (!e.path[1].dataset.Country) return;\n      const clickedListName = res.Countries\n        .find((a) => a.Country === e.path[1].dataset.Country).Country;\n      if (clickedCountry.target) geoJson.resetStyle(clickedCountry.target);\n      if (clickedListName === clickedCountry.name) {\n        clickedCountry.name = '';\n        clickedCountry.target = null;\n        return;\n      }\n      const target = geoJson._layers[Object.keys(geoJson._layers)\n        .find((key) => geoJson._layers[key].feature.properties.name === clickedListName)];\n      if (!target) return;\n      clickedCountry.name = clickedListName;\n      clickedCountry.target = target;\n      target.setStyle({\n        weight: 1,\n        color: '#e7e7e7',\n        dashArray: '',\n        fillOpacity: 0.5,\n      });\n    });\n\n    document.querySelector('.map-wrapper > .max-min-btn').addEventListener('click', () => setTimeout(() => map.invalidateSize(true), 250));\n\n    function handleClick(e) {\n      const { name } = e.target.feature.properties;\n      if (res.Countries.find((a) => a.Country === name)) {\n        const clickEvent = new Event('click', { bubbles: true });\n        const targetRow = Array.from(document.querySelectorAll('.list__row'))\n          .filter((row) => row.firstChild.textContent === name)[0];\n        if (targetRow) {\n          targetRow.firstChild.dispatchEvent(clickEvent);\n        }\n      }\n    }\n\n    function style(feature) {\n      return {\n        fillColor: getColor(feature.properties.name),\n        weight: 1,\n        opacity: 1,\n        color: '',\n        dashArray: '3',\n        dashOpacity: 0.1,\n        fillOpacity: 0.3,\n      };\n    }\n\n    function highlightFeature(e) {\n      const layer = e.target;\n      layer.setStyle({\n        weight: 1,\n        color: '#e7e7e7',\n        dashArray: '',\n        fillOpacity: 0.5,\n      });\n      info.update(layer.feature.properties);\n    }\n\n    function resetHighlight(e) {\n      if (clickedCountry.target !== e.target) {\n        geoJson.resetStyle(e.target);\n      }\n      info.update();\n    }\n\n    function onEachFeature(feature, layer) {\n      layer.on({\n        mouseover: highlightFeature,\n        mouseout: resetHighlight,\n        click: handleClick,\n      });\n    }\n    geoJson = L.geoJson(collection, {\n      style,\n      onEachFeature,\n    }).addTo(map);\n    // legend\n\n    const legend = L.control({ position: 'bottomright' });\n    legend.onAdd = function add() {\n      const key = 'TotalConfirmed';\n      const div = L.DomUtil.create('div', 'info legend');\n      let level = Math.round(maxStat[key] / 8);\n      if (level > 1000) level = Math.round(level / 1000) * 1000;\n      const colors = ['#800026', '#BD0026', '#E31A1C', '#FC4E2A',\n        '#FD8D3C', '#FEB24C', '#FED976', '#FFEDA0',\n      ];\n      colors.reverse().forEach((color, i) => {\n        div.innerHTML += `<i style=\"background:${color}\"></i> ${level * i}${colors[i + 1] ? `&ndash;${level * (i + 1)}<br>` : '+'}`;\n      });\n      return div;\n    };\n\n    legend.addTo(map);\n  };\n\n  request.send();\n}\n\n;// CONCATENATED MODULE: ./js/table.js\n\n\n\n\nconst divDeaths = document.querySelector('.table-deaths');\nconst divRecovered = document.querySelector('.table-recovered');\nconst divCases = document.querySelector('.table-cases');\nconst buttonCount = document.querySelector('.row-title-count');\nconst buttonAbs = document.querySelector('.row-title-abs');\nconst buttonArea = document.querySelector('.row-title-area');\n\ngetSummary()\n  .then((res) => {\n    const worldPopulation = 7827000000;\n    // default settings\n    document.querySelector('.day-updated').innerText = `${res.Date.slice(11, 16)} ${res.Date.slice(0, 10)}`;\n    let population = worldPopulation;\n    let source = res.Global;\n    const stat = { world: true, total: true, absolute: true };\n    let con = source.TotalConfirmed;\n    let deat = source.TotalDeaths;\n    let rec = source.TotalRecovered;\n\n    function round(n) {\n      return Math.round(n * 100) / 100;\n    }\n\n    function setStat() {\n      if (!source) {\n        divCases.innerText = 'no info';\n        divDeaths.innerText = 'no info';\n        divRecovered.innerText = 'no info';\n        return;\n      }\n      let k = 1;\n      if (!stat.absolute) {\n        k = population / 100000;\n      }\n      if (stat.total) {\n        con = source.TotalConfirmed;\n        deat = source.TotalDeaths;\n        rec = source.TotalRecovered;\n      } else {\n        con = source.NewConfirmed;\n        deat = source.NewDeaths;\n        rec = source.NewRecovered;\n      }\n      divCases.innerText = round(con / k);\n      divDeaths.innerText = round(deat / k);\n      divRecovered.innerText = round(rec / k);\n    }\n    function toggleTotal() {\n      stat.total = !stat.total;\n      buttonCount.innerText = stat.total ? 'Total' : 'New';\n      buttonCount.classList.toggle('total');\n      buttonCount.classList.toggle('new');\n      setStat();\n    }\n    function toggleAbs() {\n      stat.absolute = !stat.absolute;\n      buttonAbs.innerText = stat.absolute ? 'Absolute' : 'Per 100k';\n      buttonAbs.classList.toggle('absolute');\n      buttonAbs.classList.toggle('relative');\n      setStat();\n    }\n    buttonCount.addEventListener('click', () => toggleTotal());\n    buttonAbs.addEventListener('click', () => toggleAbs());\n\n    buttonArea.addEventListener('click', async () => {\n      buttonArea.innerText = 'World';\n      population = worldPopulation;\n      source = res.Global;\n      await setStat();\n\n      const activeListRow = document.querySelector('.list__row_active');\n      const click = new Event('click', { bubbles: true });\n      if (activeListRow) activeListRow.firstChild.dispatchEvent(click);\n    });\n\n    list.addEventListener('click', (e) => {\n      if (e.target.value) {\n        if (stat.absolute === (e.target.value[e.target.value.length - 1] === 'k')) toggleAbs();\n        if (stat.total === (e.target.value.slice(0, 3) !== 'Tot')) toggleTotal();\n        setStat();\n      }\n\n      if (!e.path[1].dataset.Country) return;\n      source = res.Countries.find((a) => a.CountryCode === e.path[1].dataset.CountryCode);\n      buttonArea.innerText = source.Country;\n      population = source.Premium.CountryStats.Population;\n      setStat();\n    });\n\n    document.querySelector('.map').addEventListener('click', () => {\n      function setSource() {\n        source = res.Countries.find((a) => a.Country === buttonArea.innerText);\n        if (source) population = source.Premium.CountryStats.Population;\n        if (!source) {\n          source = res.Global;\n          population = worldPopulation;\n        }\n        setStat();\n      }\n      setTimeout(setSource, 10);\n    });\n\n    setStat();\n    setMap(res, setStat());\n  });\n\n;// CONCATENATED MODULE: ./js/main.js\n\n\n\nconst resizeBtns = document.querySelectorAll('.max-min-btn');\n\nresizeBtns.forEach((btn) => {\n  btn.addEventListener('click', (event) => {\n    document.querySelector('.content-top').classList.toggle('flex');\n    const target = event.target.parentElement;\n    btn.classList.toggle('min');\n    Array.from(document.querySelectorAll('.resizable'))\n      .filter((div) => div !== target)\n      .forEach((div) => div.classList.toggle('hidden'));\n    target.classList.toggle('fit-window');\n  });\n});\n\nbuttonAbs.addEventListener('click', () => {\n  const options = Array.from(list.querySelectorAll('option'));\n  const selectedOption = options.filter((option) => option.selected)[0].value;\n  options.forEach((option) => option.setAttribute('selected', false));\n\n  const totalCasesOn = buttonCount.classList.contains('total');\n  const absValuesOn = buttonAbs.classList.contains('absolute');\n  const totalOrNew = totalCasesOn ? 'Total' : 'New';\n  const absOrRel = absValuesOn ? 'Per100k' : '';\n  const casesType = selectedOption.replace(/(New)|(Total)|(Per100k)/g, '');\n  indicator.value = `${totalOrNew}${casesType}${absOrRel}`;\n\n  const targetOption = options.filter((option) => option.value === indicator.value)[0];\n  targetOption.setAttribute('selected', true);\n\n  indicator.dispatchEvent(new Event('change'));\n});\n\nbuttonCount.addEventListener('click', () => {\n  const totalCasesOn = buttonCount.classList.contains('total');\n  const absValuesOn = buttonAbs.classList.contains('absolute');\n  const options = Array.from(list.querySelectorAll('option'));\n  const selectedOption = options.filter((option) => option.selected)[0].value;\n  options.forEach((option) => option.setAttribute('selected', false));\n\n  const totalOrNew = totalCasesOn ? 'New' : 'Total';\n  const absOrRel = absValuesOn ? '' : 'Per100k';\n  const casesType = selectedOption.replace(/(New)|(Total)|(Per100k)/g, '');\n  indicator.value = `${totalOrNew}${casesType}${absOrRel}`;\n\n  const targetOption = options.filter((option) => option.value === indicator.value)[0];\n  targetOption.setAttribute('selected', true);\n\n  indicator.dispatchEvent(new Event('change'));\n});\n\n;// CONCATENATED MODULE: ./js/graph.js\n/* eslint-disable no-undef */\n\n\n\n\nconst canvas = document.querySelector('#chart');\n\nconst newCasesByDay = (totalCasesByDay) => {\n  const cases = Object.values(totalCasesByDay);\n  return cases.map((el, index) => {\n    if (index === 0) return el;\n    return el - Object.values(totalCasesByDay)[index - 1];\n  });\n};\n\nconst casesPer100k = (casesByDay, population) => casesByDay\n  .map((el) => ((el / population) * 100000).toFixed(2));\n\nconst updateChartData = (chart, data, countryCode) => {\n  const { cases, recovered, deaths } = data;\n  const { datasets } = chart.data;\n  const { options } = chart;\n  const worldPopulation = 7827000000;\n  const selectedCountry = document.querySelector('.list__row_active');\n  const population = countryCode ? selectedCountry.dataset.population : worldPopulation;\n  const relativeValues = buttonAbs.classList.contains('relative');\n\n  datasets[0].data = Object.values(cases);\n  datasets[1].data = Object.values(recovered);\n  datasets[2].data = Object.values(deaths);\n  datasets[3].data = newCasesByDay(cases);\n  datasets[4].data = newCasesByDay(recovered);\n  datasets[5].data = newCasesByDay(deaths);\n  if (relativeValues) {\n    datasets.forEach((el) => {\n      const dataset = el;\n      dataset.data = casesPer100k(dataset.data, population);\n    });\n  }\n  if (!countryCode) options.title.text = 'World';\n  chart.update();\n};\n\nconst handleCountrySelection = (graph, countryCode) => {\n  getCountryStatsByDay(countryCode)\n    .then((res) => {\n      const chart = graph;\n      const activeRow = document.querySelector('.list__row_active');\n      const countryName = activeRow.dataset.Country;\n      chart.options.title.text = countryName;\n      if (!res.timeline) {\n        chart.data.datasets.forEach((el) => {\n          const dataset = el;\n          dataset.data = [];\n        });\n        chart.update();\n      }\n      if (res.timeline) updateChartData(chart, res.timeline, countryCode);\n    })\n    .catch((e) => new Error(e.message));\n};\n\nconst addTailToLabels = (chart, tail) => chart.data.datasets\n  .forEach((el) => {\n    const dataset = el;\n    if (!dataset.label.includes(tail)) dataset.label += tail;\n  });\n\nconst removeTailFromLabels = (chart, tail) => chart.data.datasets\n  .forEach((el) => {\n    const dataset = el;\n    const tailIndex = dataset.label.indexOf(tail);\n    if (tailIndex > 0) dataset.label = dataset.label.substring(0, tailIndex);\n  });\n\ngetWorldStatsByDay().then((DailyWorldStats) => {\n  Chart.defaults.global.defaultFontColor = 'rgba(255, 255, 255, 0.7)';\n  Chart.defaults.global.defaultFontFamily = 'Roboto';\n  const chart = new Chart(canvas, {\n    type: 'line',\n    data: {\n      labels: Object.keys(DailyWorldStats.cases),\n      datasets: [{\n        label: 'Total confirmed',\n        pointBackgroundColor: '#d96459',\n      }, {\n        label: 'Total recovered',\n        pointBackgroundColor: '#588c7e',\n      }, {\n        label: 'Total deaths',\n        pointBackgroundColor: 'rgba(255, 255, 255, 0.4)',\n      }, {\n        label: 'New confirmed',\n        pointBackgroundColor: '#f2ae72',\n      }, {\n        label: 'New recovered',\n        pointBackgroundColor: '#b0cfc5',\n      }, {\n        label: 'New deaths',\n        pointBackgroundColor: 'rgba(255, 255, 255, 0.9)',\n      }],\n    },\n    options: {\n      title: {\n        display: true,\n        text: 'World',\n        fontSize: '20',\n      },\n      legend: {\n        labels: {\n          boxWidth: 8,\n          usePointStyle: true,\n        },\n        position: 'bottom',\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            color: 'rgba(255, 255, 255, 0.1)',\n          },\n          ticks: {\n            fontColor: 'rgba(255, 255, 255, 0.5)',\n          },\n        }],\n        yAxes: [{\n          gridLines: {\n            color: 'rgba(255, 255, 255, 0.1)',\n          },\n          ticks: {\n            fontColor: 'rgba(255, 255, 255, 0.5)',\n          },\n        }],\n      },\n    },\n  });\n  chart.data.datasets.forEach((el, index) => {\n    const dataset = el;\n    dataset.pointBorderColor = 'rgba(0, 0, 0, 0)';\n    dataset.borderColor = dataset.pointBackgroundColor;\n    dataset.borderWidth = 1;\n    dataset.pointRadius = 2;\n    dataset.pointHoverRadius = 5;\n    dataset.backgroundColor = 'rgba(0, 0, 0, 0)';\n    if (index > 2) dataset.hidden = true;\n  });\n  updateChartData(chart, DailyWorldStats);\n  chart.update();\n\n  list.addEventListener('click', (event) => {\n    const target = event.target.parentElement;\n    if (!target.classList.contains('list__row')) return;\n    const countryIsSelected = !target.classList.contains('list__row_active');\n    if (!countryIsSelected) updateChartData(chart, DailyWorldStats);\n    if (countryIsSelected) handleCountrySelection(chart, target.dataset.CountryCode);\n  });\n\n  buttonAbs.addEventListener('click', () => {\n    const activeRow = document.querySelector('.list__row_active');\n\n    if (activeRow) handleCountrySelection(chart, activeRow.dataset.CountryCode);\n    if (!activeRow) updateChartData(chart, DailyWorldStats);\n  });\n\n  indicator.addEventListener('change', () => {\n    const countryIsSelected = document.querySelector('.list__row_active');\n    if (!countryIsSelected) setTimeout(() => updateChartData(chart, DailyWorldStats), 0);\n    if (countryIsSelected) {\n      setTimeout(() => handleCountrySelection(chart, countryIsSelected.dataset.CountryCode), 0);\n    }\n\n    const absoluteOn = !indicator.value.includes('100k');\n    if (!absoluteOn) addTailToLabels(chart, ' per 100k');\n    else removeTailFromLabels(chart, ' per 100k');\n  });\n});\n\n;// CONCATENATED MODULE: ./js/app.js\n\n\n\n\n\n\n//# sourceURL=webpack://covid-dashboard/./js/app.js_+_8_modules?")})();